// Generated by CoffeeScript 1.6.3
(function() {
  var changeDate, changeTimeRange, checkChangeDateButtons, getChartBorderDates, getChartData, getDateString, getDateToChange, getHumanizedDateString, getJsonData, getLastMonday, goToDate, parseUrl, refreshChart, setActiveTab, setDateInNavigation;

  changeDate = function() {
    $("li.js-prev a").click(function(ev) {
      ev.preventDefault();
      if (!$("li.js-prev").hasClass("disabled")) {
        return goToDate("prev");
      }
    });
    return $("li.js-next a").click(function(ev) {
      ev.preventDefault();
      if (!$("li.js-next").hasClass("disabled")) {
        return goToDate("next");
      }
    });
  };

  changeTimeRange = function() {
    return $("a.js-weight-chart-range").click(function(ev) {
      var dateString, timeRange, username;
      ev.preventDefault();
      username = parseUrl()[0];
      timeRange = $(ev.target).data("rangeType");
      dateString = getDateString(timeRange, new Date);
      $("li[data-range-type]").removeClass("active");
      $("li[data-range-type=" + timeRange + "]").addClass("active");
      return refreshChart(username, timeRange, dateString);
    });
  };

  checkChangeDateButtons = function(currentDate, timeRange) {
    var $nextButton, $prevButton, disableClass, firstDate, nextDate, prevDate;
    if (currentDate == null) {
      currentDate = null;
    }
    if (timeRange == null) {
      timeRange = null;
    }
    currentDate = currentDate || new Date(getDateString("week", null, false));
    timeRange = timeRange || parseUrl()[1];
    disableClass = "disabled";
    $prevButton = $("li.js-prev");
    firstDate = new Date($prevButton.data("firstDate"));
    prevDate = getDateToChange(currentDate, timeRange, "prev");
    if (firstDate - prevDate > currentDate - prevDate) {
      $prevButton.addClass(disableClass);
    } else {
      $prevButton.removeClass(disableClass);
    }
    $nextButton = $("li.js-next");
    nextDate = getDateToChange(currentDate, timeRange, "next");
    if (nextDate > new Date) {
      return $nextButton.addClass(disableClass);
    } else {
      return $nextButton.removeClass(disableClass);
    }
  };

  getDateString = function(timeRange, date, forceMonday) {
    var momentObject, paresedUrlList;
    if (timeRange == null) {
      timeRange = null;
    }
    if (date == null) {
      date = null;
    }
    if (forceMonday == null) {
      forceMonday = true;
    }
    paresedUrlList = parseUrl();
    timeRange = timeRange || paresedUrlList[1];
    if (!date) {
      date = timeRange === "week" && forceMonday ? getLastMonday() : new Date(paresedUrlList[2]);
    }
    momentObject = moment(date);
    switch (timeRange) {
      case "year":
        return momentObject.format("YYYY");
      case "month":
        return momentObject.format("YYYY-MM");
      case "week":
        return momentObject.format("YYYY-MM-DD");
      default:
        return null;
    }
  };

  getDateToChange = function(currentDate, timeRange, direction) {
    if (direction === "prev") {
      switch (timeRange) {
        case "year":
          return new Date(currentDate.getFullYear() - 1, 0);
        case "month":
          return new Date(currentDate.getFullYear(), currentDate.getMonth() - 1);
        case "week":
          return new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() - 7);
        default:
          return null;
      }
    } else if (direction === "next") {
      switch (timeRange) {
        case "year":
          return new Date(currentDate.getFullYear() + 1, 0);
        case "month":
          return new Date(currentDate.getFullYear(), currentDate.getMonth() + 1);
        case "week":
          return new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() + 7);
        default:
          return null;
      }
    }
  };

  getChartBorderDates = function() {
    var endDate, parsedUrl, startDate, timeRange;
    parsedUrl = parseUrl();
    timeRange = parsedUrl[1];
    startDate = new Date(parsedUrl[2]);
    switch (timeRange) {
      case "year":
        endDate = moment(startDate).endOf("year");
        break;
      case "month":
        endDate = moment(startDate).endOf("month");
        break;
      case "week":
        endDate = moment(startDate).endOf("week");
        break;
      default:
        null;
    }
    return [startDate, endDate];
  };

  getHumanizedDateString = function(timeRange, dateString, forceMonday) {
    var formatString;
    if (timeRange == null) {
      timeRange = null;
    }
    if (dateString == null) {
      dateString = null;
    }
    if (forceMonday == null) {
      forceMonday = true;
    }
    timeRange = timeRange || parseUrl()[1];
    if (!dateString) {
      dateString = getDateString(timeRange, new Date(dateString), forceMonday);
    }
    switch (timeRange) {
      case "year":
        formatString = "YYYY";
        break;
      case "month":
        formatString = "MMMM YYYY";
        break;
      case "week":
        formatString = "D MMMM YYYY";
        break;
      default:
        null;
    }
    return moment(dateString).format(formatString);
  };

  getLastMonday = function(date) {
    var diff;
    if (date == null) {
      date = null;
    }
    date = date || new Date;
    diff = (date.getDay() + 6) % 7;
    return new Date(date - diff * 24 * 60 * 60 * 1000);
  };

  goToDate = function(direction) {
    var currentDate, dateString, newDateString, nextDate, timeRange, username, _ref;
    _ref = parseUrl(), username = _ref[0], timeRange = _ref[1], dateString = _ref[2];
    currentDate = new Date(dateString);
    nextDate = getDateToChange(currentDate, timeRange, direction);
    newDateString = getDateString(timeRange, nextDate);
    return refreshChart(username, timeRange, newDateString);
  };

  parseUrl = function() {
    var url;
    url = document.URL.split("//")[1].split("#")[0].split("/");
    return [url[4], url[5], url[6]];
  };

  refreshChart = function(username, timeRange, dateString) {
    var url;
    url = "/health/show/charts/" + username + "/" + timeRange + "/" + dateString;
    window.history.pushState({}, document.title, url);
    checkChangeDateButtons(new Date(dateString), timeRange);
    setDateInNavigation();
    return getJsonData();
  };

  setActiveTab = function() {
    var timeRange;
    timeRange = parseUrl()[1];
    return $("li[data-range-type=" + timeRange + "]").addClass("active");
  };

  setDateInNavigation = function(dateString) {
    var currentDate, endDate, endDateString, formattedDateString, formattedEndDateString, parsedUrlList, timeRange;
    if (dateString == null) {
      dateString = null;
    }
    parsedUrlList = parseUrl();
    timeRange = parsedUrlList[1];
    dateString = dateString || parsedUrlList[2];
    formattedDateString = getHumanizedDateString(timeRange, dateString);
    if (timeRange === "week") {
      currentDate = new Date(dateString);
      endDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() + 6);
      endDateString = getDateString("week", endDate, false);
      formattedEndDateString = getHumanizedDateString("week", endDateString, false);
      formattedDateString = "" + formattedDateString + " - " + formattedEndDateString;
    }
    return $(".js-current-date").html(formattedDateString);
  };

  getJsonData = function() {
    var date, timeRange, username, _ref;
    _ref = parseUrl(), username = _ref[0], timeRange = _ref[1], date = _ref[2];
    return $.ajax({
      url: "/health/api",
      type: "POST",
      dataType: "json",
      data: {
        username: username,
        range_type: timeRange,
        date: date,
        csrfmiddlewaretoken: $.cookie('csrftoken')
      },
      error: function(jqXHR, textStatus, errorThrown) {
        return console.log("AJAX Error: " + errorThrown);
      },
      success: function(data) {
        return getChartData(data);
      }
    });
  };

  getChartData = function(jsonData) {
    var chartData, data, dataType, datasForType, newDate, splittedDate, valuesForChart, _i, _len;
    valuesForChart = {};
    for (dataType in jsonData) {
      datasForType = jsonData[dataType];
      valuesForChart[dataType] = [];
      for (_i = 0, _len = datasForType.length; _i < _len; _i++) {
        data = datasForType[_i];
        splittedDate = data['x'].split("-");
        newDate = new Date(splittedDate[0], splittedDate[1] - 1, splittedDate[2]);
        valuesForChart[dataType].push({
          'x': newDate,
          'y': data['y']
        });
      }
    }
    chartData = [
      {
        color: "#61AE24",
        key: "Waga (kg)",
        values: valuesForChart.weight
      }, {
        color: "#F18D05",
        key: "Tłuszcz (%)",
        values: valuesForChart.fat
      }, {
        color: "#00A1CB",
        key: "Woda (%)",
        values: valuesForChart.water
      }
    ];
    return nv.addGraph(chartData);
  };

  nv.addGraph = function(chartData) {
    var $chart, chart;
    chart = nv.models.lineChart().useInteractiveGuideline(true).margin({
      bottom: 70,
      left: 75
    }).forceX(getChartBorderDates());
    chart.xAxis.axisLabel("Data").rotateLabels(-30).tickFormat(function(d) {
      return d3.time.format("%d-%m-%Y")(new Date(d));
    });
    chart.yAxis.axisLabel("Wartość").tickFormat(d3.format(",.1f"));
    $chart = d3.select(".weight-chart svg");
    $chart.datum(chartData).transition().duration(500).call(chart);
    nv.utils.windowResize(function() {
      return $chart.call(chart);
    });
    return chart;
  };

  $(function() {
    moment.lang("pl");
    setActiveTab();
    changeTimeRange();
    changeDate();
    checkChangeDateButtons();
    setDateInNavigation();
    return getJsonData();
  });

}).call(this);
