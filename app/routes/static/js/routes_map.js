// Generated by CoffeeScript 1.6.2
(function() {
  var addStartFinishMarkers, deg2rad, displayRoutesDistance, drawFullKmMarkers, drawRoutes, get2PointsDistance, getDistanceFromLatLonInKm, getPointOnSection, getTotalDistance, initializeMap;

  initializeMap = function() {
    var mapOptions;

    mapOptions = {
      center: new google.maps.LatLng(15, 15),
      zoom: 3,
      mapTypeId: google.maps.MapTypeId.ROADMAP
    };
    return new google.maps.Map($("#map-canvas")[0], mapOptions);
  };

  drawRoutes = function(routes, map) {
    var latlngbounds, mapPoints, point, polyline, pt, route, segment, _i, _j, _k, _len, _len1, _len2, _ref;

    latlngbounds = new google.maps.LatLngBounds();
    for (_i = 0, _len = routes.length; _i < _len; _i++) {
      route = routes[_i];
      _ref = route['segments'];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        segment = _ref[_j];
        mapPoints = [];
        for (_k = 0, _len2 = segment.length; _k < _len2; _k++) {
          point = segment[_k];
          pt = new google.maps.LatLng(point['lat'], point['lon']);
          mapPoints.push(pt);
          latlngbounds.extend(pt);
        }
        polyline = new google.maps.Polyline({
          path: mapPoints,
          editable: false,
          draggable: false,
          geodesic: true,
          strokeColor: '#FF0000',
          strokeOpacity: 1.0,
          strokeWeight: 2
        });
        polyline.setMap(map);
      }
    }
    addStartFinishMarkers(mapPoints, map);
    return map.fitBounds(latlngbounds);
  };

  addStartFinishMarkers = function(mapPoints, map) {
    var finishInfoWindow, finishMarker, startInfoWindow, startMarker;

    startMarker = new google.maps.Marker({
      position: mapPoints[0],
      map: map,
      title: "Start"
    });
    startInfoWindow = new google.maps.InfoWindow({
      content: "<span>Start</span>"
    });
    google.maps.event.addListener(startMarker, 'click', function() {
      finishInfoWindow.close();
      return startInfoWindow.open(map, startMarker);
    });
    finishMarker = new google.maps.Marker({
      position: mapPoints[mapPoints.length - 1],
      map: map,
      title: "Koniec"
    });
    finishInfoWindow = new google.maps.InfoWindow({
      content: "<span>Koniec</span>"
    });
    return google.maps.event.addListener(finishMarker, 'click', function() {
      startInfoWindow.close();
      return finishInfoWindow.open(map, finishMarker);
    });
  };

  getTotalDistance = function(routes) {
    var distance, fullKmDistance, fullKmSectionsList, i, obj, pt1, pt2, route, segment, x, _i, _j, _k, _len, _len1, _ref, _ref1;

    distance = 0;
    fullKmSectionsList = [];
    fullKmDistance = 0;
    for (_i = 0, _len = routes.length; _i < _len; _i++) {
      route = routes[_i];
      _ref = route['segments'];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        segment = _ref[_j];
        for (i = _k = 1, _ref1 = segment.length - 1; 1 <= _ref1 ? _k <= _ref1 : _k >= _ref1; i = 1 <= _ref1 ? ++_k : --_k) {
          pt1 = segment[i - 1];
          pt2 = segment[i];
          x = get2PointsDistance(pt1, pt2);
          if (Math.floor(distance + x) > fullKmDistance) {
            obj = {
              startPoint: pt1,
              startDistance: distance,
              endPoint: pt2,
              endDistance: distance + x
            };
            fullKmSectionsList.push(obj);
            fullKmDistance = Math.floor(distance + x);
          }
          distance += x;
        }
      }
    }
    return [distance, fullKmSectionsList];
  };

  get2PointsDistance = function(pt1, pt2) {
    return getDistanceFromLatLonInKm(pt1['lat'], pt1['lon'], pt2['lat'], pt2['lon']);
  };

  getDistanceFromLatLonInKm = function(lat1, lon1, lat2, lon2) {
    var R, a, c, d, dlat, dlon;

    R = 6371;
    dlat = deg2rad(lat2 - lat1);
    dlon = deg2rad(lon2 - lon1);
    a = Math.sin(dlat / 2) * Math.sin(dlat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dlon / 2) * Math.sin(dlon / 2);
    c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    d = R * c;
    return d;
  };

  deg2rad = function(deg) {
    return deg * (Math.PI / 180);
  };

  drawFullKmMarkers = function(fullKmSectionsList, map) {
    var i, km, kmsToMark, lat, latlng, lon, marker, pt1ToFullKmDistance, section, start, _i, _len, _results;

    _results = [];
    for (_i = 0, _len = fullKmSectionsList.length; _i < _len; _i++) {
      section = fullKmSectionsList[_i];
      start = Math.ceil(section.startDistance);
      pt1ToFullKmDistance = start - section.startDistance;
      kmsToMark = [];
      while (start < Math.floor(section.endDistance + 1)) {
        kmsToMark.push(start);
        start += 1;
      }
      i = 0;
      _results.push((function() {
        var _j, _len1, _ref, _results1;

        _results1 = [];
        for (_j = 0, _len1 = kmsToMark.length; _j < _len1; _j++) {
          km = kmsToMark[_j];
          _ref = getPointOnSection(section, pt1ToFullKmDistance, i), lat = _ref[0], lon = _ref[1];
          latlng = new google.maps.LatLng(lat, lon);
          _results1.push(marker = new google.maps.Marker({
            position: latlng,
            map: map,
            title: i + "km"
          }));
        }
        return _results1;
      })());
    }
    return _results;
  };

  getPointOnSection = function(section, pt1ToFullKmDistance, i) {
    var X, deltaLat, deltaLon, lat, lon, x;

    deltaLon = section.endPoint['lon'] - section.startPoint['lon'];
    deltaLat = section.endPoint['lat'] - section.startPoint['lat'];
    X = get2PointsDistance(section.startPoint, section.endPoint);
    x = pt1ToFullKmDistance + i;
    lon = Math.abs(deltaLon) * x / X;
    lat = Math.abs(deltaLat) * x / X;
    if (deltaLon < 0) {
      lon = lon * -1;
    }
    if (deltaLat < 0) {
      lat = lat * -1;
    }
    return [Number(section.startPoint['lat']) + lat, Number(section.startPoint['lon']) + lon];
  };

  displayRoutesDistance = function(routesJSON, map) {
    var distance, fullKmSectionsList, _ref;

    _ref = getTotalDistance(routesJSON), distance = _ref[0], fullKmSectionsList = _ref[1];
    distance = Math.round(distance * 1000) / 1000;
    $("#total-distance").html(distance + " km");
    return drawFullKmMarkers(fullKmSectionsList, map);
  };

  window.main = function(routesJSON) {
    var map;

    if (!$.isEmptyObject(routesJSON)) {
      map = initializeMap();
      drawRoutes(routesJSON, map);
      return displayRoutesDistance(routesJSON, map);
    }
  };

}).call(this);
